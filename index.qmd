---
title: "Análise de Correspondência: Fluminense vs Inter de Milão"
author: "Marcus Ramalho e Silvia"
affiliation: "Universidade Federal do Rio de Janeiro"
date: today
lan: pt-BR
format: 
  html:
    toc: true
    toc-location: left
    theme: cosmo
    code-fold: true
    fig-width: 10
    fig-height: 8
lang: pt
---

## Introdução

Este documento apresenta uma Análise de Correspondência (CA) aplicada às estatísticas de jogadores do Fluminense e Inter de Milão. A técnica de CA é particularmente útil para analisar dados categóricos e explorar relações entre variáveis qualitativas.

A análise se baseia nas estatísticas de desempenho dos jogadores, categorizadas de acordo com sua posição em campo e seu time. O objetivo é identificar padrões de associação entre as posições específicas de cada time e suas características de desempenho, representadas por variáveis categóricas derivadas das estatísticas originais.

## Carregamento e Preparação dos Dados

```{r setup}
#| warning: false
#| message: false

# Carregar pacotes necessários
library(tidyverse)
library(FactoMineR)  # Para análise de correspondência
library(factoextra)  # Para visualização de resultados
library(ca)          # Pacote alternativo para CA
library(knitr)       # Para formatação de tabelas
library(kableExtra)  # Para tabelas mais elaboradas
library(plotly)      # Para visualizações 3D interativas

# Carregar os dados
dados <- read.csv("estatisticas_jogadores_consolidada.csv", stringsAsFactors = FALSE)

# Visualizar estrutura dos dados (primeiras linhas)
kable(head(dados, 5), 
      caption = "Primeiras 5 linhas do conjunto de dados") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  scroll_box(width = "100%")

# Resumo das variáveis principais
resumo_vars <- data.frame(
  Variavel = names(dados)[4:15], # Estatísticas principais
  Minimo = sapply(dados[, 4:15], min, na.rm = TRUE),
  Media = round(sapply(dados[, 4:15], mean, na.rm = TRUE), 2),
  Mediana = sapply(dados[, 4:15], median, na.rm = TRUE),
  Maximo = sapply(dados[, 4:15], max, na.rm = TRUE)
)

kable(resumo_vars, 
      caption = "Resumo das principais estatísticas numéricas") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

# Agrupamento por Posição e Time
Primeiro, vamos agrupar os jogadores por posição em campo para reduzir a dimensionalidade dos dados. As posições serão simplificadas em categorias mais amplas, e combinaremos essas posições com o time do jogador:

```{r}
# Mapear as posições detalhadas para categorias mais amplas
dados <- dados %>%
  mutate(PosicaoAgrupada = case_when(
    Position == "GK" ~ "Goleiro",
    Position %in% c("DC") ~ "Zagueiro",
    Position %in% c("DMR", "DML", "MR", "ML") ~ "Lateral",
    Position %in% c("MC") ~ "Volante",
    Position %in% c("AMC") ~ "Meio-Campo",
    Position %in% c("FW") ~ "Atacante",
    Position == "Sub" ~ "Substituto",
    TRUE ~ "Outros"
  ))

# Criar variável que combina posição e time
dados <- dados %>%
  mutate(Posicao_Time = paste(PosicaoAgrupada, Team, sep = "_"))

# Visualizar a distribuição de jogadores por posição agrupada e time
distribuicao_posicoes <- as.data.frame.matrix(table(dados$PosicaoAgrupada, dados$Team))
distribuicao_posicoes$Posicao <- rownames(distribuicao_posicoes)
distribuicao_posicoes <- distribuicao_posicoes %>% 
  select(Posicao, everything())

kable(distribuicao_posicoes, 
      caption = "Distribuição de jogadores por posição e time") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

# Conversão de Estatísticas Numéricas em Variáveis Categóricas
Vamos converter as estatísticas numéricas em variáveis categóricas, utilizando uma abordagem mais refinada que considera a distribuição dos dados e a natureza das estatísticas de futebol:

```{r}
# Função aprimorada para categorizar variáveis numéricas
categorizar_variavel_aprimorada <- function(x, prefixo, posicao = NULL) {
  # Verificar se o vetor tem elementos
  if (length(x) == 0) {
    return(character(0))
  }
  
  # Ignorar valores NA para cálculos
  x_clean <- x[!is.na(x)]
  
  # Se não houver valores válidos, retornar NA com prefixo
  if (length(x_clean) == 0) {
    return(rep(paste0(prefixo, "_NA"), length(x)))
  }
  
  # Se todos os valores forem iguais, criar apenas uma categoria
  if (length(unique(x_clean)) == 1) {
    result <- rep(paste0(prefixo, "_Único"), length(x))
    result[is.na(x)] <- paste0(prefixo, "_NA")
    return(result)
  }
  
  # Se houver poucos valores únicos (2 ou 3), usar esses valores como categorias
  if (length(unique(x_clean)) <= 3) {
    categorias <- as.character(x)
    categorias[!is.na(categorias)] <- paste0(prefixo, "_", categorias[!is.na(categorias)])
    categorias[is.na(x)] <- paste0(prefixo, "_NA")
    return(categorias)
  }
  
  # Verificar proporção de zeros
  prop_zeros <- sum(x_clean == 0) / length(x_clean)
  
  # Inicializar o resultado com NAs
  resultado <- rep(NA, length(x))
  
  if (prop_zeros >= 0.3) {
    # Se há muitos zeros, criar uma categoria específica para eles
    resultado[x == 0] <- paste0(prefixo, "_Nenhum")
    
    # Para os valores não-zeros, aplicar quartis
    x_nonzero <- x_clean[x_clean > 0]
    if (length(x_nonzero) > 0) {
      quartis <- quantile(x_nonzero, probs = c(0.33, 0.67), na.rm = TRUE)
      resultado[x > 0 & x <= quartis[1]] <- paste0(prefixo, "_Baixo")
      resultado[x > quartis[1] & x <= quartis[2]] <- paste0(prefixo, "_Médio") 
      resultado[x > quartis[2]] <- paste0(prefixo, "_Alto")
    }
  } else {
    # Caso contrário, usar quartis para toda a distribuição
    quartis <- quantile(x_clean, probs = c(0.33, 0.67), na.rm = TRUE)
    resultado[x <= quartis[1]] <- paste0(prefixo, "_Baixo")
    resultado[x > quartis[1] & x <= quartis[2]] <- paste0(prefixo, "_Médio")
    resultado[x > quartis[2]] <- paste0(prefixo, "_Alto")
  }
  
  # Tratar NAs
  resultado[is.na(x)] <- paste0(prefixo, "_NA")
  
  # Se ainda houver valores NA no resultado (pode acontecer por discrepâncias), tratá-los
  if (any(is.na(resultado))) {
    resultado[is.na(resultado)] <- paste0(prefixo, "_Outro")
  }
  
  return(resultado)
}

# Mapeamento de nomes em inglês para português
mapear_nome_variavel <- function(prefixo) {
  # Dicionário de tradução
  traducoes <- list(
    "ShotsOT" = "ChutesNoGol",
    "KeyPasses" = "PassesChave",
    "PA" = "PrecisaoPasses",
    "AerialsWon" = "DuelosAereos",
    "Touches" = "Toques",
    "Passes" = "Passes",
    "Crosses" = "Cruzamentos",
    "Dribbles" = "Dribles",
    "Fouled" = "SofrerFaltas",
    "TotalTackles" = "Desarmes",
    "Interceptions" = "Interceptacoes",
    "Clearances" = "Rebatidas"
  )
  
  # Verificar se existe tradução para o prefixo
  if (prefixo %in% names(traducoes)) {
    return(traducoes[[prefixo]])
  } else {
    return(prefixo)  # Se não encontrar tradução, manter o original
  }
}

# Selecionar as variáveis numéricas mais relevantes para categorização
variaveis_para_categorizar <- c(
  "ShotsOT", "KeyPasses", "PA", "AerialsWon", "Touches", 
  "Passes", "Crosses", "Dribbles", "Fouled", "TotalTackles", 
  "Interceptions", "Clearances"
)

# Criar as variáveis categorizadas
dados_categorizados <- dados

# Loop com tradução para português e categorização aprimorada
for (var in variaveis_para_categorizar) {
  # Remover caracteres especiais do nome da variável para criar o prefixo
  prefixo <- gsub("[^[:alnum:]]", "", var)
  
  # Traduzir o prefixo para português
  prefixo_pt <- mapear_nome_variavel(prefixo)
  
  # Verificar se a variável existe
  if (!(var %in% names(dados))) {
    warning(paste("Variável", var, "não encontrada no dataframe"))
    next
  }
  
  # Capturar e reportar erros durante a categorização
  tryCatch({
    # Categorizar a variável com a função aprimorada
    resultado_cat <- categorizar_variavel_aprimorada(dados[[var]], prefixo_pt)
    
    # Verificar se o resultado tem o comprimento correto
    if (length(resultado_cat) == nrow(dados)) {
      dados_categorizados[[paste0(var, "_Cat")]] <- resultado_cat
    } else {
      warning(paste("Resultado da categorização para", var, 
                    "tem comprimento diferente:", 
                    length(resultado_cat), "vs", nrow(dados)))
    }
  }, error = function(e) {
    warning(paste("Erro ao categorizar", var, ":", e$message))
  })
}

# Mostrar as variáveis categóricas criadas
variaveis_categorizadas <- grep("_Cat$", names(dados_categorizados), value = TRUE)
vars_info <- data.frame(
  Variável_Original = variaveis_para_categorizar,
  Variável_Categorizada = variaveis_categorizadas
)

kable(vars_info, 
      caption = "Variáveis categorizadas criadas") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

# Visualizar as novas variáveis categorizadas
dados_cat_amostra <- dados_categorizados[1:6, c("Player", "Team", "PosicaoAgrupada", grep("_Cat$", names(dados_categorizados), value = TRUE))]

kable(dados_cat_amostra, 
      caption = "Amostra das variáveis categorizadas (primeiros 6 jogadores)") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
  scroll_box(width = "100%")

# Analisar a distribuição das categorias para cada variável
distribuicao_categorias <- list()
for (var in variaveis_categorizadas) {
  distribuicao_categorias[[var]] <- table(dados_categorizados[[var]])
}

```

# Construção da Tabela de Contingência por Posição e Time
Agora, vamos criar tabelas de contingência cruzando as posições específicas de cada time (linhas) com as categorias das estatísticas (colunas):

```{r}
# Criar tabelas de contingência para cada variável categorizada
variaveis_categorizadas <- grep("_Cat$", names(dados_categorizados), value = TRUE)

# Função para criar tabela de contingência com Posicao_Time como linhas
criar_tabela_contingencia <- function(dados, var_categorica) {
  # Criar tabela de contingência
  tabela <- table(dados$Posicao_Time, dados[[var_categorica]])
  return(tabela)
}

# Criar uma tabela de contingência completa
tabela_completa <- NULL

for (var in variaveis_categorizadas) {
  tabela_temp <- criar_tabela_contingencia(dados_categorizados, var)
  
  if (is.null(tabela_completa)) {
    tabela_completa <- tabela_temp
  } else {
    # Adicionar apenas se a tabela tiver ao menos uma coluna não vazia
    if (sum(colSums(tabela_temp) > 0) > 0) {
      tabela_completa <- cbind(tabela_completa, tabela_temp)
    }
  }
}

# Mostrar a tabela de contingência (primeiras colunas)
kable(tabela_completa[, 1:min(10, ncol(tabela_completa))], 
      caption = "Tabela de Contingência por Posição e Time (primeiras 10 colunas)") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  scroll_box(width = "100%")

# Mostrar informações sobre a dimensionalidade da tabela
info_tabela <- data.frame(
  Métrica = c("Número de linhas", "Número de colunas", "Número máximo de dimensões possíveis"),
  Valor = c(
    nrow(tabela_completa), 
    ncol(tabela_completa),
    min(nrow(tabela_completa) - 1, ncol(tabela_completa) - 1)
  )
)

kable(info_tabela, 
      caption = "Informações sobre a dimensionalidade da tabela de contingência") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

# Execução da Análise de Correspondência
Com a tabela de contingência pronta, vamos realizar a Análise de Correspondência:

```{r}
# Realizar a análise de correspondência
ca_result <- CA(tabela_completa, graph = FALSE)

# Mostrar a inércia total e a contribuição de cada dimensão
eigenvalues_df <- as.data.frame(ca_result$eig)
names(eigenvalues_df) <- c("Autovalor", "Percentual de Variância (%)", "Percentual Acumulado (%)")
eigenvalues_df$Dimensão <- paste("Dimensão", 1:nrow(eigenvalues_df))
eigenvalues_df <- eigenvalues_df %>% 
  select(Dimensão, everything())
eigenvalues_df <- eigenvalues_df[1:min(5, nrow(eigenvalues_df)),] # Mostrar apenas as 5 primeiras dimensões

kable(eigenvalues_df, 
      caption = "Autovalores e variância explicada por cada dimensão",
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

# Avaliação da Qualidade da Representação
Vamos avaliar a qualidade da representação das categorias no mapa perceptual:

```{r}
# Contribuição das linhas (posições por time) para as dimensões
row_contrib <- ca_result$row$contrib
row_contrib_df <- as.data.frame(row_contrib)
row_contrib_df$Posicao_Time <- rownames(row_contrib_df)
row_contrib_long <- pivot_longer(row_contrib_df, 
                                 cols = -Posicao_Time, 
                                 names_to = "Dimensao", 
                                 values_to = "Contribuicao")

# Extrair posição e time para melhor visualização
row_contrib_long <- row_contrib_long %>%
  mutate(
    Posicao = sub("_.*$", "", Posicao_Time),
    Time = sub("^.*_", "", Posicao_Time)
  )

# Visualizar contribuições das linhas
ggplot(row_contrib_long %>% filter(Dimensao %in% c("Dim 1", "Dim 2", "Dim 3")), 
       aes(x = Posicao_Time, y = Contribuicao, fill = Dimensao)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(title = "Contribuição das Posições por Time para as Dimensões",
       x = "Posição e Time", y = "Contribuição (%)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Contribuição das colunas (estatísticas) para as dimensões
col_contrib <- ca_result$col$contrib
# Selecionar as colunas com maior contribuição para Dim 1 e Dim 2
top_cols_dim1 <- names(sort(col_contrib[, 1], decreasing = TRUE)[1:10])
top_cols_dim2 <- names(sort(col_contrib[, 2], decreasing = TRUE)[1:10])
top_cols <- unique(c(top_cols_dim1, top_cols_dim2))

col_contrib_df <- as.data.frame(col_contrib[top_cols, 1:2])
col_contrib_df$Estatistica <- rownames(col_contrib_df)
col_contrib_long <- pivot_longer(col_contrib_df, 
                                cols = -Estatistica, 
                                names_to = "Dimensao", 
                                values_to = "Contribuicao")

# Visualizar contribuições das colunas (top contribuições)
ggplot(col_contrib_long, aes(x = reorder(Estatistica, Contribuicao), 
                           y = Contribuicao, fill = Dimensao)) +
  geom_bar(stat = "identity", position = "dodge") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top Contribuições das Estatísticas para as Dimensões",
       x = "Estatística", y = "Contribuição (%)")

# Tabela com contribuições das principais posições por time
top_pos_contrib <- row_contrib_df %>%
  select(Posicao_Time, `Dim 1`, `Dim 2`) %>%
  arrange(desc(`Dim 1`)) %>%
  head(5)

kable(top_pos_contrib, 
      caption = "Top 5 Posições com Maior Contribuição para Dimensão 1",
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

# Tabela com contribuições das principais estatísticas
top_stat_contrib <- as.data.frame(col_contrib) %>%
  select(`Dim 1`, `Dim 2`) %>%
  mutate(Estatistica = rownames(.)) %>%
  arrange(desc(`Dim 1`)) %>%
  head(5) %>%
  select(Estatistica, everything())

kable(top_stat_contrib, 
      caption = "Top 5 Estatísticas com Maior Contribuição para Dimensão 1",
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

# Visualização dos Resultados
Vamos criar visualizações do mapa perceptual da Análise de Correspondência:

```{r}
# Criar um dataframe com as coordenadas das linhas (posições por time)
row_coords <- as.data.frame(ca_result$row$coord[, 1:2])
row_coords$Posicao_Time <- rownames(row_coords)
# Renomeando as colunas para evitar problemas com espaços no nome
names(row_coords)[1:2] <- c("Dim1", "Dim2")

# Separar posição e time para melhor visualização
row_coords <- row_coords %>%
  mutate(
    Posicao = sub("_.*$", "", Posicao_Time),
    Time = sub("^.*_", "", Posicao_Time)
  )

# Criar um dataframe com as coordenadas das colunas (estatísticas)
col_coords <- as.data.frame(ca_result$col$coord[, 1:2])
col_coords$Estatistica <- rownames(col_coords)
# Renomeando as colunas para evitar problemas com espaços no nome
names(col_coords)[1:2] <- c("Dim1", "Dim2")

# Tabela com coordenadas das posições
kable(row_coords[, c("Posicao_Time", "Posicao", "Time", "Dim1", "Dim2")], 
      caption = "Coordenadas das Posições no Mapa Perceptual",
      digits = 3) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
  scroll_box(height = "300px")

# Mapa perceptual - Biplot com posição_time
ggplot() +
  # Pontos das posições por time (linhas)
  geom_point(data = row_coords, 
             aes(x = Dim1, y = Dim2, color = Time, shape = Posicao),
             size = 3) +
  geom_text(data = row_coords, 
            aes(x = Dim1, y = Dim2, label = Posicao, color = Time), 
            vjust = -1, hjust = 0.5, size = 3) +
  # Pontos das estatísticas (colunas) - apenas as mais contributivas
  geom_point(data = col_coords %>% 
               filter(Estatistica %in% top_cols), 
             aes(x = Dim1, y = Dim2), 
             shape = 17, color = "darkred") +
  geom_text(data = col_coords %>% 
              filter(Estatistica %in% top_cols), 
            aes(x = Dim1, y = Dim2, label = Estatistica), 
            vjust = 1, size = 3, color = "darkred") +
  # Adicionar linhas de referência nos eixos
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
  # Estética do gráfico
  theme_minimal() +
  scale_color_manual(values = c("Inter" = "blue", "Fluminense" = "darkgreen")) +
  labs(title = "Mapa Perceptual da Análise de Correspondência",
       subtitle = paste0("Dimensão 1 (", round(ca_result$eig[1, 2], 1), 
                        "%) vs. Dimensão 2 (", round(ca_result$eig[2, 2], 1), "%)"),
       x = paste0("Dimensão 1 (", round(ca_result$eig[1, 2], 1), "%)"),
       y = paste0("Dimensão 2 (", round(ca_result$eig[2, 2], 1), "%)"),
       color = "Time",
       shape = "Posição") +
  theme(legend.position = "right")
```

# Visualizações com factoextra
O pacote factoextra fornece visualizações mais elaboradas para Análise de Correspondência:

```{r}
# Gráfico das linhas (posições por time) com factoextra
fviz_ca_row(ca_result, 
           repel = TRUE, 
           col.row = as.factor(row_coords$Time)) +
  theme_minimal() +
  labs(title = "Mapa Perceptual das Posições por Time",
       x = "Dimensão 1",
       y = "Dimensão 2")

# Biplot com linhas e colunas
fviz_ca_biplot(ca_result, 
              repel = TRUE,
              col.row = as.factor(row_coords$Time),
              col.col = "darkgreen",
              title = "Mapa Perceptual Completo: Posições por Time e Estatísticas") +
  theme_minimal()
```

# Comparação Direta entre Posições Equivalentes
Para entender melhor as diferenças táticas entre os times, vamos comparar diretamente as mesmas posições nos dois times:

```{r}
# Identificar as posições que existem em ambos os times
posicoes_comuns <- dados_categorizados %>%
  group_by(PosicaoAgrupada) %>%
  summarise(Times = n_distinct(Team)) %>%
  filter(Times > 1) %>%
  pull(PosicaoAgrupada)

# Filtrar apenas as posições comuns do mapa
posicoes_comparacao <- row_coords %>%
  filter(Posicao %in% posicoes_comuns)

# Mostrar as posições comuns e suas coordenadas
kable(posicoes_comparacao %>% 
        arrange(Posicao, Time) %>% 
        select(Posicao, Time, Dim1, Dim2),
      caption = "Coordenadas das Posições Comuns aos Dois Times",
      digits = 3) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

# Visualizar comparação direta entre posições equivalentes nos dois times
ggplot(posicoes_comparacao, aes(x = Dim1, y = Dim2, color = Time, label = Posicao)) +
  geom_point(size = 4) +
  geom_text(vjust = -1, size = 3.5) +
  # Conectar posições equivalentes com linhas
  geom_line(aes(group = Posicao), color = "gray50", linetype = "dashed") +
  # Adicionar linhas de referência nos eixos
  geom_hline(yintercept = 0, linetype = "dotted", color = "gray70") +
  geom_vline(xintercept = 0, linetype = "dotted", color = "gray70") +
  # Estética do gráfico
  theme_minimal() +
  scale_color_manual(values = c("Inter" = "blue", "Fluminense" = "darkgreen")) +
  labs(title = "Comparação de Posições Equivalentes entre Inter de Milão e Fluminense",
       subtitle = "As linhas conectam posições equivalentes nos dois times",
       x = "Dimensão 1", 
       y = "Dimensão 2") +
  theme(legend.position = "bottom")
```

# Análise e Interpretação
Vamos analisar as dimensões obtidas e interpretar o significado das associações encontradas:

```{r}
# Extrair as contribuições das categorias para cada dimensão
dim1_contrib_col <- sort(col_contrib[, 1], decreasing = TRUE)
dim2_contrib_col <- sort(col_contrib[, 2], decreasing = TRUE)

# Top categorias contribuindo para a Dimensão 1
top_dim1 <- head(dim1_contrib_col, 5)
top_dim1_df <- data.frame(
  Estatistica = names(top_dim1),
  Contribuicao = top_dim1
)

# Top categorias contribuindo para a Dimensão 2
top_dim2 <- head(dim2_contrib_col, 5)
top_dim2_df <- data.frame(
  Estatistica = names(top_dim2),
  Contribuicao = top_dim2
)

# Exibir resultados
kable(top_dim1_df, caption = "Top 5 Estatísticas Contribuindo para Dimensão 1",
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"))

kable(top_dim2_df, caption = "Top 5 Estatísticas Contribuindo para Dimensão 2",
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"))

# Criar um dataframe com as coordenadas e contribuições
interpretacao <- data.frame(
  Dimensao = c("Dimensão 1", "Dimensão 2"),
  Variancia_Explicada = c(
    paste0(round(ca_result$eig[1, 2], 2), "%"),
    paste0(round(ca_result$eig[2, 2], 2), "%")
  ),
  Interpretacao = c(
    "Esta dimensão separa as posições por características técnicas e táticas entre os times, destacando as diferenças de estilo de jogo entre Inter de Milão e Fluminense.",
    "Esta dimensão contrasta funções específicas das posições, como defensivas vs. ofensivas, independentemente do time."
  )
)

# Exibir a interpretação
kable(interpretacao, caption = "Interpretação das Dimensões") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

# Visualização 3D da Análise de Correspondência

Para explorar ainda mais as relações entre posições por time e estatísticas, vamos criar uma visualização tridimensional interativa que incorpora as três primeiras dimensões da Análise de Correspondência:

```{r visualization_3d}
#| warning: false
#| message: false

# Extrair as coordenadas para as três primeiras dimensões
row_coords_3d <- as.data.frame(ca_result$row$coord[, 1:3])
row_coords_3d$Posicao_Time <- rownames(row_coords_3d)
names(row_coords_3d)[1:3] <- c("Dim1", "Dim2", "Dim3")

# Separar posição e time
row_coords_3d <- row_coords_3d %>%
  mutate(
    Posicao = sub("_.*$", "", Posicao_Time),
    Time = sub("^.*_", "", Posicao_Time)
  )

# Extrair coordenadas para as colunas (estatísticas)
col_coords_3d <- as.data.frame(ca_result$col$coord[, 1:3])
col_coords_3d$Estatistica <- rownames(col_coords_3d)
names(col_coords_3d)[1:3] <- c("Dim1", "Dim2", "Dim3")

# Mostrar as coordenadas 3D das posições
kable(row_coords_3d %>% 
        select(Posicao, Time, Dim1, Dim2, Dim3),
      caption = "Coordenadas 3D das Posições",
      digits = 3) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
  scroll_box(height = "300px")

# Filtrar apenas as estatísticas mais contributivas
top_cols_dim3 <- names(sort(ca_result$col$contrib[, 3], decreasing = TRUE)[1:10])
top_cols_3d <- unique(c(top_cols, top_cols_dim3))

col_coords_3d_filtered <- col_coords_3d %>%
  filter(Estatistica %in% top_cols_3d)

# Criar gráfico 3D das posições por time
fig_rows <- plot_ly() %>%
  add_trace(
    data = row_coords_3d,
    x = ~Dim1, y = ~Dim2, z = ~Dim3,
    color = ~Time,
    symbol = ~Posicao,
    type = "scatter3d",
    mode = "markers+text",
    text = ~Posicao,
    textposition = "top center",
    marker = list(size = 6),
    name = ~paste(Posicao, Time)
  )

# Adicionar as informações de dimensões
fig_rows <- fig_rows %>%
  layout(
    scene = list(
      xaxis = list(title = paste0("Dimensão 1 (", round(ca_result$eig[1, 2], 1), "%)")),
      yaxis = list(title = paste0("Dimensão 2 (", round(ca_result$eig[2, 2], 1), "%)")),
      zaxis = list(title = paste0("Dimensão 3 (", round(ca_result$eig[3, 2], 1), "%)"))
    ),
    title = "Visualização 3D das Posições por Time"
  )

fig_rows
```

```{r}
# Criar gráfico 3D combinando posições e estatísticas (biplot 3D)
fig_biplot <- plot_ly() %>%
  # Posições por time
  add_trace(
    data = row_coords_3d,
    x = ~Dim1, y = ~Dim2, z = ~Dim3,
    color = ~Time,
    symbol = ~Posicao,
    type = "scatter3d",
    mode = "markers",
    marker = list(size = 6),
    name = ~paste(Posicao, Time),
    text = ~Posicao,
    hoverinfo = "text"
  ) %>%
  # Estatísticas
  add_trace(
    data = col_coords_3d_filtered,
    x = ~Dim1, y = ~Dim2, z = ~Dim3,
    type = "scatter3d",
    mode = "markers+text",
    marker = list(color = "darkred", symbol = "diamond", size = 4),
    text = ~Estatistica,
    textposition = "top center",
    name = "Estatísticas",
    hoverinfo = "text"
  )

# Adicionar as informações de dimensões
fig_biplot <- fig_biplot %>%
  layout(
    scene = list(
      xaxis = list(title = paste0("Dimensão 1 (", round(ca_result$eig[1, 2], 1), "%)")),
      yaxis = list(title = paste0("Dimensão 2 (", round(ca_result$eig[2, 2], 1), "%)")),
      zaxis = list(title = paste0("Dimensão 3 (", round(ca_result$eig[3, 2], 1), "%)"))
    ),
    title = "Mapa Perceptual 3D: Posições por Time e Estatísticas"
  )

fig_biplot
```

```{r}
# Filtrar posições comuns em ambos os times
posicoes_comparacao_3d <- row_coords_3d %>%
  filter(Posicao %in% posicoes_comuns)

# Criar um gráfico 3D apenas com as posições comuns
fig_comparison <- plot_ly() %>%
  add_trace(
    data = posicoes_comparacao_3d,
    x = ~Dim1, y = ~Dim2, z = ~Dim3,
    color = ~Time,
    symbol = ~Posicao,
    type = "scatter3d",
    mode = "markers+text",
    text = ~Posicao,
    textposition = "top center",
    marker = list(size = 6),
    name = ~paste(Posicao, Time)
  )

# Adicionar linhas conectando posições equivalentes
for (pos in posicoes_comuns) {
  pos_data <- posicoes_comparacao_3d %>% filter(Posicao == pos)
  
  if (nrow(pos_data) == 2) {
    fig_comparison <- fig_comparison %>%
      add_trace(
        x = pos_data$Dim1,
        y = pos_data$Dim2,
        z = pos_data$Dim3,
        type = "scatter3d",
        mode = "lines",
        line = list(color = 'gray', width = 3, dash = 'dash'),
        showlegend = FALSE,
        hoverinfo = "none"
      )
  }
}

# Adicionar as informações de dimensões
fig_comparison <- fig_comparison %>%
  layout(
    scene = list(
      xaxis = list(title = paste0("Dimensão 1 (", round(ca_result$eig[1, 2], 1), "%)")),
      yaxis = list(title = paste0("Dimensão 2 (", round(ca_result$eig[2, 2], 1), "%)")),
      zaxis = list(title = paste0("Dimensão 3 (", round(ca_result$eig[3, 2], 1), "%)"))
    ),
    title = "Comparação 3D de Posições Equivalentes entre Inter de Milão e Fluminense"
  )

fig_comparison
```